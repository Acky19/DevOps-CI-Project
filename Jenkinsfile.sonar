pipeline {
    agent any

    tools {
        nodejs 'node16' // Ensure 'node16' matches the Node.js version configured in Jenkins
    }

    environment {
        SONAR_TOKEN = credentials('SONAR-PROJECT') // Ensure 'SONAR-PROJECT' matches your Jenkins credentials ID
        SCANNER_HOME = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation' // Correct SonarQube scanner tool configuration
    }

    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    sh 'npm install'
                }
            }
        }
        
        stage('Start Services') {
            steps {
                script {
                    sh 'npm run compose:up'
                }
            }
        }

        stage('Run Integration Tests') {
            steps {
                script {
                    sh 'npm run test:integration'
                }
            }
        }

        stage('Run End-to-End Tests') {
            steps {
                script {
                    sh 'npm run test:e2e'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: params.SONAR_API_KEY_ID, variable: 'SONAR_API_KEY')]) {
                    withSonarQubeEnv('sonar') { // 'sonar' should match your SonarQube server configuration name in Jenkins
                        sh """
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=Bank \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=$SONAR_API_KEY \
                        -Dsonar.sourceEncoding=UTF-8 \
                        -Dsonar.language=js,ts \
                        -Dsonar.sources=./app/backend/src
                        """
                    }
                }
            }
        }
       // stage('OWASP Dependency Check') {
           // steps {
               // dependencyCheck additionalArguments: '--scan ./app/backend --disableYarnAudit --disableNodeAudit', odcInstallation: 'DC'
                // dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
           // }
        //}
        stage('Start Containers') {
            steps {
                sh 'npm run compose:up'
            }
        }
        stage('Run Integration Tests') {
            steps {
                sh 'npm run test:integration'
            }
        }
        stage('Run E2E Tests') {
            steps {
                sh 'npm run test:e2e'
            }
        }
        // Uncomment if you want to bring the containers down after tests
        /*
        stage('Stop Containers') {
            steps {
                sh 'npm run compose:down'
            }
        }
        */
    }
    post {
        always {
            echo 'Cleaning up resources...'
            // Ensure containers are stopped regardless of build status
            sh 'npm run compose:down || true'
            // Clean up the workspace
            deleteDir() // Deletes the workspace directory
        }
    }
}
