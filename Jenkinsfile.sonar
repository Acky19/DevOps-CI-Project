pipeline {
    agent any

    tools {
        nodejs 'node16' // Ensure 'node16' matches the Node.js version configured in Jenkins
    }

    environment {
        SONAR_TOKEN = credentials('SONAR-PROJECT') // Ensure 'SONAR-PROJECT' matches your Jenkins credentials ID
        SCANNER_HOME = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation' // Correct SonarQube scanner tool configuration
        SONAR_HOST_URL = 'http://192.168.201.13:9000' // Update this with your actual SonarQube server URL
    }

    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    sh 'npm install'
                }
            }
        }

        stage('Start Services') {
            steps {
                script {
                    sh 'npm run compose:up'
                }
            }
        }

        stage('Run Integration Tests') {
            steps {
                script {
                    sh 'npm run test:integration'
                }
            }
        }

        stage('Run End-to-End Tests') {
            steps {
                script {
                    sh 'npm run test:e2e'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'SONAR-PROJECT', variable: 'SONAR_API_KEY')]) {
                    withSonarQubeEnv('SonarQubeScanner') { // Ensure 'SonarQube' matches your SonarQube server config name in Jenkins
                        sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=Bank \
                        -Dsonar.host.url=${Bank} \
                        -Dsonar.login=${SONAR-TOKEN} \
                        -Dsonar.sourceEncoding=UTF-8 \
                        -Dsonar.language=js,ts \
                        -Dsonar.sources=./app/backend/src
                        """
                    }
                }
            }
        }

        stage('Start Containers') {
            steps {
                sh 'npm run compose:up'
            }
        }

        stage('Run Integration Tests Again') {
            steps {
                sh 'npm run test:integration'
            }
        }

        stage('Run E2E Tests Again') {
            steps {
                sh 'npm run test:e2e'
            }
        }

        // Uncomment this block if you want to stop containers after tests
        /*
        stage('Stop Containers') {
            steps {
                sh 'npm run compose:down'
            }
        }
        */
    }

    post {
        always {
            echo 'Cleaning up resources...'
            sh 'npm run compose:down || true' // Ensure containers are stopped even if the build fails
            deleteDir() // Clean up the workspace
        }
    }
}

