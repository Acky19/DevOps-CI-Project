pipeline {
    agent any

    tools {
        nodejs 'node16' // Ensure 'node16' matches the Node.js version configured in Jenkins
    }

    environment {
        SONAR_TOKEN = credentials('SONAR-PROJECT') // Ensure 'SONAR-PROJECT' matches your Jenkins credentials ID
        SCANNER_HOME = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation' // Correct SonarQube scanner tool configuration
    }

    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    sh 'npm install'
                }
            }
        }
        
        stage('Start Services') {
            steps {
                script {
                    sh 'npm run compose:up'
                }
            }
        }

        stage('Run Integration Tests') {
            steps {
                script {
                    sh 'npm run test:integration'
                }
            }
        }

        stage('Run End-to-End Tests') {
            steps {
                script {
                    sh 'npm run test:e2e'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-token') { // Ensure 'sonar' matches your SonarQube server configuration in Jenkins
                    sh """ 
                    ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName="Bank" \
                        -Dsonar.projectKey="Bank" \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://192.168.201.13:9000 \
                        -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh 'npm run compose:down' // Ensure services are stopped
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
