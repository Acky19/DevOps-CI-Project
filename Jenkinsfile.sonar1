pipeline {
    agent any

    tools {
        nodejs 'node16' // Ensure 'node16' matches the Node.js version configured in Jenkins
    }

    environment {
        SONAR_TOKEN = credentials('SONAR-PROJECT') // Use Jenkins credentials for the Sonar token
        SCANNER_HOME = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    }


    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    sh 'npm install'
                }
            }
        }

        stage('Start Services') {
            steps {
                script {
                    sh 'npm run compose:up'
                }
            }
        }

        stage('Run Integration Tests') {
            steps {
                script {
                    sh 'npm run test:integration'
                }
            }
        }

        stage('Run End-to-End Tests') {
            steps {
                script {
                    sh 'npm run test:e2e'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'SONAR-PROJECT', variable: )])
                 {
                    withSonarQubeEnv('sonar-scanner') { // Ensure 'SonarQube' matches your SonarQube server config name in Jenkins
                     sh """
                     ${SCANNER_HOME}/bin/sonar-scanner \
                    -Dsonar.projectKey=Bank \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=http://192.168.201.13:9000 \
                    -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Start Containers') {
            steps {
                sh 'npm run compose:up'
            }
        }

        stage('Run Integration Tests Again') {
            steps {
                sh 'npm run test:integration'
            }
        }

        stage('Run E2E Tests Again') {
            steps {
                sh 'npm run test:e2e'
            }
        }

        // Uncomment this block if you want to stop containers after tests
        /*
        stage('Stop Containers') {
            steps {
                sh 'npm run compose:down'
            }
        }
        */
    }

    post {
        always {
            echo 'Cleaning up resources...'
            sh 'npm run compose:down || true' // Ensure containers are stopped even if the build fails
            deleteDir() // Clean up the workspace
        }
    }
}

